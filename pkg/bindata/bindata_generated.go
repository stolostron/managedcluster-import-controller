// Code generated for package bindata by go-bindata DO NOT EDIT. (@generated)
// sources:
// resources/hub/managedcluster/manifests/managedcluster-clusterrole.yaml
// resources/hub/managedcluster/manifests/managedcluster-clusterrolebinding.yaml
// resources/hub/managedcluster/manifests/managedcluster-service-account.yaml
// resources/klusterlet/bootstrap_secret.yaml
// resources/klusterlet/cluster_role.yaml
// resources/klusterlet/cluster_role_binding.yaml
// resources/klusterlet/crds/v1/0000_00_operator.open-cluster-management.io_klusterlets.crd.yaml
// resources/klusterlet/crds/v1beta1/0000_00_operator.open-cluster-management.io_klusterlets.crd.yaml
// resources/klusterlet/image_pull_secret.yaml
// resources/klusterlet/klusterlet.yaml
// resources/klusterlet/klusterlet_admin_aggregate_clusterrole.yaml
// resources/klusterlet/namespace.yaml
// resources/klusterlet/operator.yaml
// resources/klusterlet/service_account.yaml
package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _hubManagedclusterManifestsManagedclusterClusterroleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x31\x4f\xe3\x50\x0c\xc7\xf7\xf7\x29\xac\x74\xbd\xe6\x74\xdb\xe9\x6d\xa7\x0e\x37\x01\x12\x03\x0b\xea\xe0\x24\x26\x31\x4d\x9e\x1f\xb6\xd3\xaa\x54\xfd\xee\xa8\x4d\x40\x40\xe9\x64\x4b\xfe\xc9\xfe\xfd\xbd\x80\x95\xe4\xbd\x72\xdb\x39\xac\x24\xb9\x72\x35\xba\xa8\x81\x0b\x78\x47\x70\x97\x29\xc1\xaa\x1f\xcd\x49\xe1\x06\x13\xb6\x34\x50\x72\xc8\x2a\xcf\x54\x7b\x08\x98\xf9\x81\xd4\x58\x52\x04\xad\xb0\x2e\x71\xf4\x4e\x94\x5f\xd1\x59\x52\xb9\xf9\x6b\x25\xcb\xef\xed\x9f\xb0\xe1\xd4\xc4\xf7\x55\xf7\xd2\x53\x18\xc8\xb1\x41\xc7\x18\x00\x12\x0e\x14\xc1\xf6\xe6\x34\x44\xc9\x94\x96\xf5\x44\x2e\x87\x8f\xa3\x71\x6a\x9b\x79\x12\x2b\x11\x37\x57\xcc\xf1\x70\x80\x72\x92\x6b\xe6\x03\xb7\x38\x10\x1c\x8f\x41\xc7\x9e\x2c\x86\x05\xfc\xeb\x7b\xd9\xc1\xbc\x01\xb0\x3d\x85\x70\x01\x15\x47\x27\x60\x37\xa8\x49\x9d\x9f\xb8\x46\xa7\xb0\x04\xcc\xfc\x5f\x65\xcc\x16\xe1\xb1\xf8\x34\xb2\x39\x52\xb1\x0e\x00\x4a\x26\xa3\xd6\x74\x01\x71\x9b\x38\xb5\x4a\x2f\x23\x99\xdb\x99\xdd\x92\x56\x13\xa7\x84\x4e\xc5\x2f\x28\x5a\xf2\x53\xe9\xd9\xce\x75\x87\x5e\x77\xc5\xfa\xba\x6c\x4b\x7e\x61\x36\xc5\x2d\xaf\xbc\xec\x47\xd1\xaf\x6f\xfc\x66\x37\x3b\xcd\x92\xeb\xf0\x16\x00\x00\xff\xff\xf7\xf9\xea\x7a\x21\x02\x00\x00")

func hubManagedclusterManifestsManagedclusterClusterroleYamlBytes() ([]byte, error) {
	return bindataRead(
		_hubManagedclusterManifestsManagedclusterClusterroleYaml,
		"hub/managedcluster/manifests/managedcluster-clusterrole.yaml",
	)
}

func hubManagedclusterManifestsManagedclusterClusterroleYaml() (*asset, error) {
	bytes, err := hubManagedclusterManifestsManagedclusterClusterroleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hub/managedcluster/manifests/managedcluster-clusterrole.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _hubManagedclusterManifestsManagedclusterClusterrolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x90\x31\x6b\x02\x41\x10\x85\xfb\xfd\x15\x83\xa9\xbd\x90\x2e\x6c\x17\x2d\x52\x25\x01\x03\xe9\xe7\xf6\x26\x3a\xd1\x9d\x59\x66\x67\x05\x23\xfe\xf7\xa0\x9e\x42\x10\xd2\xa5\x5b\x98\xf7\xde\xf7\xb1\x77\x30\xd7\xb2\x33\x5e\xae\x1c\xe6\x2a\x6e\xdc\x37\x57\xab\xe0\x0a\xbe\x22\x78\x2b\x24\x30\xdf\xb4\xea\x64\xf0\x82\x82\x4b\xca\x24\x0e\xc5\xf4\x8b\x92\x87\x80\x85\x3f\xc8\x2a\xab\x44\xb0\x1e\x53\x87\xcd\x57\x6a\xfc\x8d\xce\x2a\xdd\xfa\xb1\x76\xac\xf7\xdb\x87\xb0\x66\x19\xe2\x65\x6a\xa1\x1b\x9a\xb1\x0c\x2c\xcb\x90\xc9\x71\x40\xc7\x18\x00\x04\x33\x45\xa8\xbb\xea\x94\xa3\x16\x92\x69\x3a\x17\xa6\xf9\xca\x8e\xe7\xe7\x30\x5e\x62\xaf\xea\xd5\x0d\x4b\xdc\xef\xa1\x3b\x3b\x0e\x23\xe7\x15\x33\xc1\xe1\x10\x4c\x37\xb4\xa0\xcf\x23\x02\x0b\x3f\x9b\xb6\xf2\x87\x6e\x00\xb8\xb1\xfd\x47\xb9\xda\xfa\xe3\x5f\xd6\x18\xa6\x23\xf7\x9d\x6c\xcb\x89\x9e\x52\xd2\x26\x7e\x45\x4f\x8e\x1b\xb3\xcb\xe2\xef\xd0\x38\x36\x19\xc3\xb5\x60\xba\x34\x6e\xa9\xa7\xeb\x29\xfd\x13\x00\x00\xff\xff\xa1\xce\xea\x83\x00\x02\x00\x00")

func hubManagedclusterManifestsManagedclusterClusterrolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_hubManagedclusterManifestsManagedclusterClusterrolebindingYaml,
		"hub/managedcluster/manifests/managedcluster-clusterrolebinding.yaml",
	)
}

func hubManagedclusterManifestsManagedclusterClusterrolebindingYaml() (*asset, error) {
	bytes, err := hubManagedclusterManifestsManagedclusterClusterrolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hub/managedcluster/manifests/managedcluster-clusterrolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _hubManagedclusterManifestsManagedclusterServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xce\xb1\x6a\xc4\x30\x10\x84\xe1\x5e\x4f\x31\x38\x7d\x20\xad\xba\xc4\x75\x9c\x22\x90\x7e\x23\x2f\xb6\x92\xd3\xae\x58\xad\x0d\x87\xf1\xbb\x1f\xdc\xd9\xc5\xd5\xf3\x0d\xfc\x2f\xe8\xb5\x5e\x2d\x4f\xb3\xa3\x57\x71\xcb\xbf\x8b\xab\x35\xb8\xc2\x67\xc6\x57\x65\x41\x7f\x59\x9a\xb3\xe1\x93\x84\x26\x2e\x2c\x8e\x6a\xfa\xc7\xc9\x43\xa0\x9a\x7f\xd8\x5a\x56\x89\x58\xdf\xc2\x7f\x96\x31\xe2\x9b\x6d\xcd\x89\xdf\x53\xd2\x45\x3c\x14\x76\x1a\xc9\x29\x06\x40\xa8\x70\x44\xb7\x6d\x78\xfd\x50\xf5\xe6\x46\xf5\x99\x0f\x54\x18\xfb\xde\x1d\xb8\x55\x4a\xe7\xe3\x11\x30\x1e\x3d\xc3\xb9\xde\xf5\x2d\x00\x00\xff\xff\x9b\xd4\xc7\xa7\xca\x00\x00\x00")

func hubManagedclusterManifestsManagedclusterServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_hubManagedclusterManifestsManagedclusterServiceAccountYaml,
		"hub/managedcluster/manifests/managedcluster-service-account.yaml",
	)
}

func hubManagedclusterManifestsManagedclusterServiceAccountYaml() (*asset, error) {
	bytes, err := hubManagedclusterManifestsManagedclusterServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hub/managedcluster/manifests/managedcluster-service-account.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _klusterletBootstrap_secretYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8d\xb1\x4e\xc3\x40\x10\x44\xfb\xfb\x8a\x91\xa9\x83\x44\x7b\x25\x2e\x23\x48\x81\x44\xbf\x76\x16\xfb\x48\xbc\xbb\xec\xed\x21\x45\x51\xfe\x1d\x01\x36\xd4\x33\xef\xbd\x3b\xf4\x6a\x17\x2f\xd3\x1c\xe8\x55\xc2\xcb\xd0\x42\xbd\x22\x14\x31\x33\x0e\xc6\x82\xfe\xdc\x6a\xb0\xe3\x89\x84\x26\x5e\x58\x02\xe6\xfa\xce\x63\xa4\x44\x56\x5e\xd9\x6b\x51\xc9\xf8\x7c\x48\xa7\x22\xc7\x8c\x17\x1e\x9d\x23\x2d\x1c\x74\xa4\xa0\x9c\x00\xa1\x85\x33\xba\x41\x35\x6a\x38\xd9\x6e\x6e\xc3\xee\xd4\x06\x1e\x55\xde\xca\xd4\xad\x97\x6a\x34\x7e\xff\xae\x57\xdc\xef\x7f\xb3\x67\x8e\xe7\x6d\xc1\xed\xd6\xa5\xb8\x18\x67\x1c\x8c\x3e\x1a\xa7\xcd\xff\xaf\x5a\xe9\xc7\xad\xb4\xff\x5b\x7e\xe8\xaf\x00\x00\x00\xff\xff\xfb\xf6\x72\x27\xf2\x00\x00\x00")

func klusterletBootstrap_secretYamlBytes() ([]byte, error) {
	return bindataRead(
		_klusterletBootstrap_secretYaml,
		"klusterlet/bootstrap_secret.yaml",
	)
}

func klusterletBootstrap_secretYaml() (*asset, error) {
	bytes, err := klusterletBootstrap_secretYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "klusterlet/bootstrap_secret.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _klusterletCluster_roleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x3d\x8f\xdb\x30\x0c\xdd\xfd\x2b\x04\xdf\x7a\x49\xd0\xad\xf0\x56\x64\xe8\x54\x14\xe8\xd0\xa5\xc8\xc0\x48\x8c\xa3\x46\x16\x05\x92\x4a\x7a\xfd\xf5\x85\x9c\x8f\x36\xb1\xdd\xe6\xd0\x0c\x37\x59\x5f\x7c\x7c\xef\x89\xa2\x9f\xcc\x92\xd2\x0b\xfb\x76\xab\x66\x49\x51\xd9\xaf\xb3\x12\x8b\x51\x32\xba\x45\xf3\x39\x61\x34\xcb\x90\x45\x91\xcd\x27\x88\xd0\x62\x87\x51\x4d\x62\xfa\x8e\x56\xab\x0a\x92\xff\x8a\x2c\x9e\x62\x63\x78\x0d\x76\x0e\x59\xb7\xc4\xfe\x27\xa8\xa7\x38\xdf\xbd\x97\xb9\xa7\xc5\xfe\x5d\xb5\xf3\xd1\x35\x67\xa8\x2f\x14\xb0\xea\x50\xc1\x81\x42\x53\x19\x13\xa1\xc3\xc6\xec\x8e\xbb\x01\xb5\xe2\x1c\x50\x9a\xea\xc9\x7c\x08\x81\x0e\x3d\x17\xc6\xd6\x8b\x72\x0f\x3c\xa3\x84\x0c\x4a\x5c\x88\x5a\x46\x50\x34\x07\xe2\x5d\x20\x70\xd5\xcc\x40\xf2\x1f\x99\x72\x92\xc6\x7c\xab\xeb\x55\x65\x0c\xa3\x50\x66\x8b\xfd\x8a\xa0\x65\x54\xa9\x9f\x4d\x6d\x29\x6e\x7c\xdb\x41\xea\x67\x82\xbc\xf7\x16\xc1\x5a\xca\x51\xa5\x8f\xdc\x23\xaf\xfb\xa8\x63\x9a\x72\xac\x45\x2d\x9f\xe0\xa5\xff\xe6\xe4\x4e\x1b\x07\x50\xbb\x2d\x83\x74\x1e\x38\x0c\xa8\x58\xaf\x6e\x49\x8d\xd9\x34\x42\x34\xaf\x8b\xcd\x60\x2d\x8a\x30\xee\x3d\x1e\xc6\x49\x0d\xf0\x87\x58\xc5\x62\x49\x60\xf1\x5e\x59\x27\x31\x93\x12\x46\x52\x90\xbb\x45\x1f\xc5\x1c\x42\x3d\x9b\x1a\xf7\x18\x55\x26\xad\x38\x6e\x4f\x51\xbf\xf8\x7d\xba\x8b\xa1\xdf\x29\xc9\x10\xd4\x61\x0a\xf4\xd2\xfd\x0d\xf9\x01\x77\x3d\xf9\x2e\x86\x84\xec\xf1\x05\x30\x05\x5c\xfb\xe8\x7c\x6c\xfb\xba\xbc\x9a\xbf\x35\xa2\x17\x86\x0f\xa4\x56\xea\x41\x2c\x84\xd3\xb9\xa2\xbd\x5e\xbd\xaa\x1b\x58\x76\x32\x2c\x02\x8f\x3f\x14\x63\x69\x57\xd3\x95\x66\xb3\x28\x75\xe7\x25\x87\x1b\x1f\x7d\xc9\xf2\x50\xe7\xef\x92\xd2\xf5\x0d\xf7\x8f\xb6\x58\xe4\xc8\xfc\x56\xd6\x39\x64\x4e\x09\xe3\xec\x74\x33\xb3\xee\xd2\xad\x47\x55\xfe\x06\xbd\xe7\xc5\x5e\xc9\xfa\x67\x1d\xfd\x2f\xa1\x85\x28\x68\xbe\xe1\x75\x9b\xff\x4e\x0f\x8b\x8e\xc5\x31\x76\xd1\x07\x1a\x48\x29\x78\x74\x1d\x44\xbf\x41\xd1\xf2\xdb\x18\x7a\x5a\x56\x5f\x45\x7f\x0c\xf5\x5a\xc0\xb0\x3e\xce\x42\x7e\x05\x00\x00\xff\xff\xcd\x10\xb6\x44\x86\x07\x00\x00")

func klusterletCluster_roleYamlBytes() ([]byte, error) {
	return bindataRead(
		_klusterletCluster_roleYaml,
		"klusterlet/cluster_role.yaml",
	)
}

func klusterletCluster_roleYaml() (*asset, error) {
	bytes, err := klusterletCluster_roleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "klusterlet/cluster_role.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _klusterletCluster_role_bindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\x31\x4f\xc3\x40\x0c\x85\xf7\xfb\x15\x56\x99\x09\x62\x43\xb7\x41\x06\x06\x04\x48\x45\x62\x77\x2e\x26\x31\x49\xec\x93\xcf\x57\x09\xaa\xfe\x77\x54\x95\xb2\x10\x75\xf5\xe7\xf7\xbe\x77\x05\xad\xe6\x2f\xe3\x61\x74\x68\x55\xdc\xb8\xab\xae\x56\xc0\x15\x7c\x24\x78\xcd\x24\xd0\xce\xb5\x38\x19\x3c\xa3\xe0\x40\x0b\x89\x43\x36\xfd\xa4\xe4\x21\x60\xe6\x77\xb2\xc2\x2a\x11\xac\xc3\xd4\x60\xf5\x51\x8d\xbf\xd1\x59\xa5\x99\xee\x4a\xc3\x7a\xb3\xbb\x0d\x13\x4b\x1f\xcf\x55\x5b\x9d\xe9\x81\xa5\x67\x19\xc2\x42\x8e\x3d\x3a\xc6\x00\x20\xb8\x50\x84\xe9\xf4\x34\x93\x07\xd3\x99\xb6\xf4\x71\x64\x98\xf9\xd1\xb4\xe6\x0b\x9e\x00\xf0\x4f\xb3\xd6\x5a\x6a\x77\x5c\x5f\x62\xb8\xfe\x0d\xbc\x91\xed\x38\xd1\x7d\x4a\x5a\xc5\xd7\x32\xa7\x53\xc9\x98\x28\xc2\x66\xbf\x87\xe6\xe9\x0f\xbe\x9c\x09\x1c\x0e\x9b\xf0\x13\x00\x00\xff\xff\xf2\xf1\x30\xe3\x54\x01\x00\x00")

func klusterletCluster_role_bindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_klusterletCluster_role_bindingYaml,
		"klusterlet/cluster_role_binding.yaml",
	)
}

func klusterletCluster_role_bindingYaml() (*asset, error) {
	bytes, err := klusterletCluster_role_bindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "klusterlet/cluster_role_binding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _klusterletCrdsV10000_00_operatorOpenClusterManagementIo_klusterletsCrdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x6d\x6f\xdb\x46\xf2\x7f\xef\x4f\x31\xd0\xff\x0f\x24\xce\x49\x74\x9d\x1e\x7a\xad\x80\x20\xc8\xb9\xcd\x21\x48\xd3\x06\x71\x9a\x02\x67\xf9\xae\x43\xee\x50\xda\x9a\xdc\x65\x77\x97\xb2\xd5\xa2\xdf\xfd\x30\xbb\x7c\x16\x29\x39\x4d\x72\x2f\x0e\xe5\x2b\x89\x5c\xce\xce\xe3\x6f\x1e\x96\x58\xc8\x77\x64\xac\xd4\x6a\x09\x58\x48\xba\x73\xa4\xf8\x9f\x8d\x6e\xbe\xb4\x91\xd4\x67\xdb\xf3\x93\x1b\xa9\xc4\x12\x2e\x4a\xeb\x74\xfe\x86\xac\x2e\x4d\x42\x5f\x53\x2a\x95\x74\x52\xab\x93\x9c\x1c\x0a\x74\xb8\x3c\x01\x50\x98\xd3\x12\x6e\xb2\xd2\x3a\x32\x19\x39\x1b\xe9\x82\x0c\x3a\x6d\xf8\x87\x5a\x24\xe1\xc9\x22\x47\x85\x6b\xca\x49\xb9\x48\xea\x13\x5b\x50\xc2\x6f\xaf\x8d\x2e\x8b\x25\xdc\xe7\x95\xb0\x95\xe5\xb7\x00\x02\x83\x2f\x9b\x5d\xfd\xcd\x4c\x5a\xf7\x72\xf0\xe0\x5b\x69\xc3\xc3\x22\x2b\x0d\x66\x3d\x4e\xfd\x7d\x2b\xd5\xba\xcc\xd0\x74\x9f\x9c\x00\xd8\x44\x17\xb4\x84\x8b\x70\xef\x04\xa0\x30\x64\xc9\x6c\xe9\x07\x75\xa3\xf4\xad\x7a\x2e\x29\x13\x76\x09\x29\x66\x96\x4e\x00\xb6\x41\xa5\x9e\xbd\x45\xa5\x94\xed\x79\xd8\x21\xd9\x50\x8e\x81\x6f\x60\x51\xd5\xb3\xd7\x2f\xde\x7d\x7e\xd9\xbb\x0d\x20\xc8\x26\x46\x16\xce\x1b\xa6\x15\x00\x0c\xf9\xad\x95\xb3\x90\x68\xe5\x8c\xce\x32\x32\x16\xb4\x02\xb7\x21\x08\x3a\x12\x50\xe9\x2c\x82\x1f\x37\xa4\x1a\x9a\xc0\xaf\xa4\x72\x5d\x1a\x12\x73\xbf\xbe\x47\xf8\x97\x52\x1a\xb2\x80\x60\x29\x31\xe4\x3c\xdb\x02\x74\x0a\xb1\xd6\xce\x3a\x83\xc5\x62\x53\xc6\x8b\x9b\x32\xa6\x40\xa7\x43\x58\x86\xfd\x2d\xe6\x14\x0c\x53\x60\x42\xe0\x34\x60\x96\xe9\x5b\x78\xf6\xfa\x85\xdf\x80\xac\xb3\x7c\x97\xd7\x6e\xca\x18\x52\x6d\xfc\x6f\x43\x6b\xc9\x3b\x78\x7f\x6a\xa9\x16\x46\x3b\x9d\xe8\x2c\x6a\xee\xb9\x1d\xdb\x41\xc7\x3f\x53\xe2\x4e\x3a\xcb\x0a\x32\x4e\xd6\xee\x10\xae\x8e\x67\x77\xee\x0e\x34\xfb\x80\x95\x1f\x56\x81\x60\x97\x26\xeb\x19\xaa\x0c\x48\xa2\xb2\x17\xab\xc1\x6d\xa4\x6d\xf5\x3f\xe4\xd5\x5b\x33\x05\x54\x15\x77\x11\x5c\xb2\x83\x18\x0b\x76\xa3\xcb\x4c\xb0\xee\xb7\x64\x58\xd1\x89\x5e\x2b\xf9\x6b\x43\xbb\xd1\x48\x86\x8e\xac\x1b\xd0\x94\xca\x91\x51\x98\xc1\x16\xb3\x92\xe6\x80\x4a\x40\x8e\x3b\x30\xc4\xbb\x40\xa9\x3a\xf4\xfc\x12\x1b\xc1\x2b\x6d\x08\xa4\x4a\xf5\x12\x36\xce\x15\x76\x79\x76\xb6\x96\xae\x8e\xe8\x44\xe7\x79\xa9\xa4\xdb\x9d\x79\x0f\x92\x71\xe9\xb4\xb1\x67\x82\xb6\x94\x9d\x59\xb9\x5e\xa0\x49\x36\xd2\x51\xe2\x4a\x43\x67\x58\xc8\x85\x67\x5d\x39\x0f\x0b\xb9\xf8\x3f\x53\x61\x80\x7d\xd0\xe3\x35\xd8\xc6\x3a\x23\x55\xd7\x35\x7c\x70\x1e\xb0\x00\xc7\x28\x48\xef\x77\xfe\xd5\x20\x45\xab\x68\xbe\xc5\xda\x79\xf3\xcd\xe5\x5b\xa8\xb7\xf6\xc6\x18\x6a\xdf\xeb\xbd\x13\x21\xad\x09\x58\x61\x52\xa5\x64\x82\x11\x53\xa3\x73\x4f\x93\x94\x28\xb4\x54\xce\xff\x49\x32\x49\x6a\xa8\x7e\x5b\xc6\xb9\x74\xb6\xeb\xbd\x11\x5c\xa0\x52\xda\x41\x4c\x50\x16\x02\x1d\x89\x08\x5e\x28\xb8\xc0\x9c\xb2\x0b\xb4\xf4\xc9\x0d\xc0\x9a\xb6\x0b\x56\xec\xfd\x4c\xd0\x45\xe8\xe1\xe2\x41\x2c\x01\xd4\x60\x3c\x61\xaf\xcb\x82\x92\x2e\x0a\xb1\xe6\x04\x59\x69\x48\x80\xa0\x22\xd3\x3b\x86\xe8\x06\x69\x7c\x98\x70\x60\x0c\xd0\xb9\xbd\x70\xcd\x90\x7e\x1f\xce\xa6\x22\x9d\xaf\x0a\xf1\xbe\x63\xa8\x1d\x3c\x1a\x08\x70\xd1\xae\x64\xb7\x63\xfe\x19\xb1\x42\x84\xef\x41\x28\xc7\x66\x4c\x7b\x14\x01\x12\x43\x6c\x79\x46\xde\x4d\x19\x47\xf0\xb6\x0f\xa7\x5e\x2a\x58\x93\xe2\x54\xe6\x51\xd5\xa0\x12\x3a\x0f\x7b\xc9\x74\x84\xa2\x74\xcc\x0f\x3b\x96\x25\x37\x07\x6d\x40\x48\x9b\x68\xef\xc0\xcc\x19\x16\x2c\xbe\x91\xe8\xa8\xe1\x2e\x70\xae\xe0\xfb\x82\xd4\xe5\x46\xa6\x03\x45\x1e\xf0\x09\xbe\x38\xdb\x33\xb6\x84\x30\xf9\xe1\xcd\xb7\x7b\x6a\x1d\xe8\xee\x9b\xbd\x17\x86\xae\x80\x3e\xef\x7a\x24\x2c\xa4\x4f\x91\x66\x44\xd4\xd2\x64\xd6\x23\x59\x82\x10\x97\x4a\x64\x1e\x76\xd1\x2b\x00\x93\x84\xac\x95\x71\x46\x0d\x7f\xd9\x0e\x5e\xa4\x95\x7e\x2c\x39\xa0\xbc\x70\xbb\xf9\x08\xdd\xa1\xf1\x36\xc8\x0a\xed\xd2\xe9\x50\x2f\x4d\x16\x36\xe5\x4c\x94\x34\xa9\x7d\xcf\xd0\xa8\x60\x2b\xad\x9c\x54\x2d\x1a\x83\xbb\xbd\x67\xd2\x51\x3e\xa2\xce\x61\x34\xd5\x8a\xdc\xd3\x63\xad\x3d\xcf\x66\x4f\x55\x23\x34\xe1\xb0\xf6\x46\xde\x98\x0c\xb1\x70\x4d\x07\x5a\xad\x94\xbf\x7b\x5e\xc6\x9f\x0e\x23\xee\x59\x58\x5c\x87\x5b\x23\x09\x07\x57\xa2\x95\x62\xd8\xe6\x5a\xe1\x80\xc7\x84\x6b\x3c\x46\x23\xb8\xdc\x59\x47\x39\x24\x64\x9c\x05\x34\x04\xa5\x25\x01\x32\x6d\x63\x6a\x92\xa4\xa5\x11\xc3\x76\x75\x34\x1a\x39\xf5\x95\x6a\x93\xa3\x5b\x42\xbc\x73\xe3\x76\x29\x4d\x76\x2f\x1d\xb1\x0b\x54\xea\x61\x83\x77\xe3\xa7\xcd\x52\x7d\xf1\x27\x45\xaa\xd5\xf2\xfe\x62\x35\xa5\xdb\x11\x1c\xf8\xae\x29\xf1\x3a\x08\xda\xd4\x7c\x21\x0d\x04\x37\xf6\xe0\xee\xc1\xb1\x59\x32\x16\xb7\xa5\x75\xb0\xc1\x2d\xe3\x47\x61\x28\x95\x77\x2c\xeb\x6c\xa2\xfe\x5f\xcc\x42\x19\x74\xc4\xbe\x1e\x45\xfb\xcc\x1d\x22\xea\x59\x9d\x31\x39\xef\x3c\x4e\x8f\xc6\xae\x97\x6c\x24\x65\x1d\x51\x6c\xb7\xc0\x7d\x91\xe3\x9a\x5e\x97\x59\x76\xb9\x97\x69\xf7\x14\xfd\x66\xea\xbd\xa9\x14\x2c\x79\xd1\x18\x8a\x0d\xf3\x71\x97\xa3\x3f\x20\xd0\xad\x36\x37\xef\x23\xc8\x8f\xc3\xf5\x07\x05\xe8\xb3\x3b\x22\x8e\x4e\x3d\x07\xef\xc9\xb8\x75\xe8\x4a\x7b\xa8\xb8\xf1\x0b\x86\xac\x25\xa5\x31\x9c\xcd\xc3\xeb\xfd\x62\xe6\x63\x95\x2f\x5a\x09\xdf\x4d\x1f\xcb\xc0\x0f\x2e\x9a\x95\xbe\x01\xc4\xaa\xf3\x12\x32\x4d\xc9\x54\x95\x57\x58\x50\xf1\x4b\xc3\x3a\x19\x02\x6e\x85\x52\xb8\x95\x24\x82\x77\x98\x49\xd1\x79\xdf\x97\x99\x0c\xa7\x4b\x78\x56\x14\x99\x24\xb1\x84\x0b\x9d\x17\x5a\xb1\x6a\x46\xa8\xfa\x08\x8e\x89\x14\xd7\x2a\xbc\xbe\xee\x0b\xf7\x00\xfb\xd9\x16\x65\x86\x71\x46\x47\x28\x8e\xbf\xef\x21\x1e\x6b\x12\x1e\x0b\x0c\xa1\xd8\x31\xf8\x78\xcc\x8c\xe0\xb5\xd1\x6b\xc3\x99\x50\xad\xc7\xf0\xb7\xdd\xf4\xd0\x16\x52\x01\x82\x33\xa8\xac\x57\x08\x77\x22\xac\x53\x1a\x43\xd6\xaf\x69\x6d\x50\xf4\x55\x34\x45\x5b\x68\x5f\xe6\xe5\xe8\x92\x4d\xd7\xf9\x8f\xc6\x2d\x4b\xaa\x55\xb6\x63\x4f\xda\x4a\xc1\x2f\x86\x5d\xbd\xd8\x32\xa1\xe8\xc1\x27\x28\x52\x66\x8d\xcf\xd5\x2e\x67\x41\x90\x43\x99\x59\xef\x48\x5a\x11\x20\xb7\x0d\x4d\x86\xaa\x22\x66\x34\x01\x79\x0d\x36\xfd\xf4\xb3\xd7\x2f\xa0\x9e\x29\x45\xb0\x58\x2c\xe0\x2d\xdf\xb6\xce\x94\x89\xc7\x76\xee\x7f\x15\x4b\x98\xfa\x82\xd8\x8c\xd7\x2b\xc0\xa0\x0d\xc8\x45\x65\x10\x15\x30\x34\x75\xa9\xa4\x4c\x40\x81\x6e\x03\x51\x88\x87\xa8\x8d\xb5\x08\xe0\xb9\x36\x40\x77\x98\x17\x19\x8d\x15\x94\x41\x7d\xf0\x5c\xeb\x0a\x1a\x02\x63\xbf\xf9\x47\x67\x67\xf0\xa6\x8f\x14\x3a\x66\x3b\x60\x08\x4f\xce\xe1\xa3\x24\x53\xad\x1f\xd8\x1e\xaa\x50\x54\x13\x7c\xa9\xf4\xad\x1a\x63\xd5\xf3\xc1\xb1\x38\x4a\x72\x35\x6b\x22\x6a\x35\x9b\xc3\x6a\xd6\xf1\xff\x55\x95\x2e\x57\xb3\xda\x47\x57\xb3\x7a\xbb\xbf\x14\xec\x83\xaf\xc8\xac\xe9\x25\xed\x9e\xf0\x26\xe3\xf4\x7b\xeb\x2f\x39\x6f\xd0\x7a\xf7\x24\xe7\x17\x1b\x5a\x5c\xf9\xbf\xdd\x15\xf4\x24\xc7\xa2\x77\xf3\x15\x16\xc7\xa9\x77\x80\xed\xea\x9a\x3b\xd6\xed\x79\xd4\x3a\xde\x4f\x3f\x5b\xad\x96\xab\x59\xab\x91\xb9\xce\xd9\x7d\x0b\xb7\x5b\xcd\x46\xa9\xf6\x58\x5d\xae\x66\x9e\xd9\xd5\x0c\x7a\x22\x2f\x57\x33\x66\x8b\x6f\x1b\xed\x74\x5c\xa6\xcb\xd5\x8c\xab\x39\x3b\x3f\x9f\x1b\x2a\xe6\x5c\x3c\x3c\x69\x77\x5d\xcd\x7e\x1a\x17\x41\xd5\x12\x6b\xb7\x21\x13\xfc\xce\xc2\xef\x63\xac\x1d\xa9\xbd\xab\x49\x9c\x18\xb3\xf4\x02\x32\xb4\xee\x6d\x03\x49\x6f\x65\x3e\xa6\xd2\x05\xe4\x64\xed\x78\x25\xb0\x60\xac\xb4\xa3\x59\x75\x51\xa5\x8c\xd1\x47\x13\xd6\x3b\xd6\x29\xec\xf3\x7b\xaf\x7a\x78\xff\xb5\xba\xd4\xe4\x27\xe0\xf8\x86\x47\x9a\xda\x32\x93\xd5\x70\x8b\xdf\x0c\x22\x46\xe7\x1e\xaf\xaa\x5c\xce\x5d\x87\xf2\x16\x8b\x2a\xe0\x09\xc3\xba\x98\xe0\xb6\x3f\x3a\x1d\x10\xe5\x3a\x5d\x09\x32\xd9\x8e\xb3\x42\x9b\x33\x93\x0d\xaa\x35\x89\x08\xb8\x63\xad\x9b\x32\x06\x7b\x3f\x27\xf6\xf5\xe8\x34\xd5\xd2\xd6\xc3\x2e\x2f\x1f\x73\xe0\xff\x31\x48\x06\x20\xab\xc8\xd7\x9d\x5e\xe1\x38\xe2\x3f\x42\xff\x22\xd0\xd1\xc2\x8d\x3b\x13\xd4\xce\x74\x2f\xc3\x55\x6b\xc3\x44\x6f\x53\xe6\xa8\x7c\x6e\xf6\x89\xba\x79\xa6\x84\x4c\xd0\x4d\xb3\x05\x4d\x7e\xc1\x58\x97\x01\xc9\x5b\x3b\x56\xa6\xca\x71\xc7\x76\x42\x15\xe6\x01\x95\xa0\x1f\xa0\x8c\x1c\xef\xbe\x25\xb5\x76\x9b\x25\x7c\xfe\xf8\x6f\x5f\x7c\x39\xba\x2c\x40\x3c\x89\x7f\x84\xd1\xce\xde\x78\x79\x42\x2d\xfb\xaf\x0d\xab\xcc\xa8\x9e\xd2\x45\xeb\x66\xcd\x01\xff\xab\xf2\x5b\xeb\x79\xb7\x18\x86\x23\x31\x72\xfb\x52\x16\xac\x27\xce\x6e\x52\x59\x87\x2a\xa1\x39\xf7\x4b\xef\xb5\x89\x6c\x92\x54\xb6\x83\xf3\xc7\x73\x88\x2b\x53\xec\xa7\xa7\xab\xbb\xeb\x68\x5f\xc4\x43\x94\xbf\x9a\x0f\xf8\x97\x16\xd8\xd4\x3a\xf5\xce\x08\xb7\xd2\x6d\xc0\x50\x28\x2b\xaa\x01\xf9\xa1\xb2\x02\xfa\xa5\x05\x35\x72\x1f\x76\x08\x2e\x2f\xd6\x93\x13\x87\x3a\x3c\xa4\x72\x5f\xfc\x75\xca\x6b\xa4\x92\x79\x99\x2f\xe1\xb3\xd1\x05\x01\x6c\xef\xe5\x23\x61\x69\x5b\x63\x71\x2f\xac\xd7\x06\xf3\x1c\x9d\x4c\x40\x0a\x52\x4e\xa6\x92\xcc\x7d\x02\x28\x1c\xab\x78\x82\xf5\x29\x4b\xa3\xeb\x07\xb6\x42\xd1\x4e\x48\xbd\x36\x5a\x94\x09\x99\x31\xf0\x0f\x97\x4e\xfd\x6c\x58\xa6\x32\xd9\x6b\x12\x38\x16\xc3\xf9\x09\xd0\x1d\x9b\xac\x39\x8d\xe0\xd2\x63\x92\x64\x4e\xc8\x55\xb5\x6d\xfb\x11\x0f\x73\xa1\x5e\xb9\xdd\x90\x4f\xa5\xfe\x3c\xa6\xa2\x65\xbc\x14\x56\x0a\x1a\x2f\x97\xc3\x85\xb0\x2e\xd1\xa0\x72\x44\x82\xc1\x33\x0c\x20\xc2\xb9\x42\x0b\xf0\xd8\x4e\xec\x8f\x60\x07\x04\xc0\x09\x10\xcc\xa2\x56\xd3\x7f\x8f\x3b\x1f\x07\x70\xce\x3f\x7b\x7c\xc0\xc1\x9a\x55\x13\x4b\x0a\x74\x8e\x8c\x5a\xc2\xbf\xae\x9e\x2d\xfe\x89\x8b\x5f\xaf\x1f\x56\x3f\x3e\x5b\x7c\xf5\xef\xf9\xf2\xfa\x51\xe7\xef\xf5\xe9\xd3\xff\x9f\xac\xcc\x87\xed\x71\x7b\xf5\x5c\xb5\x6d\x85\x7b\x8e\x35\xf7\xb9\x55\xa7\xf0\xd6\x94\x34\x87\xe7\x98\x59\x9a\x43\x75\x48\xfa\x01\x8a\x22\x55\xe6\x53\x7c\x2d\x60\xc6\xbb\x8d\xd7\x80\xfe\xb1\x67\x63\xfa\x79\xc5\xde\x64\xf5\x7f\x2f\x85\xf8\xf2\x5c\xa7\x5d\x3c\xeb\x9c\x08\x81\xc7\x61\x2e\xfc\xa3\xaa\xd9\x88\x12\x9d\x9f\xb5\x27\x46\x93\x8e\xc7\x1d\xd1\x2b\x54\x3b\x68\xc1\x36\xb4\x02\xc3\x88\xb0\x8e\x9b\x09\x4c\x8c\xb6\xb6\x39\x26\x9b\x0e\xe6\x4c\xde\x50\xdb\x85\x07\x68\x8f\x29\x41\xdf\x46\x99\x58\x3a\x83\x66\xd7\x19\x4b\xf8\x31\x78\xec\x07\xab\x69\x99\x4d\x92\x7d\x68\x89\x20\x52\x5a\xd0\x7e\x8e\x38\x0d\x88\x8f\xb1\xcc\xa4\xdb\x85\x41\x21\xb7\xb7\x99\xf4\x9d\xde\x74\xb2\xc8\x0b\x6d\x1c\xd6\x73\x44\x43\x6b\xba\x03\x59\xb5\xcf\x64\x39\x71\x3c\x14\xca\x9e\x9f\x3f\xfe\xfc\xb2\x8c\x85\xce\x51\xaa\xe7\xb9\x3b\x3b\x7d\xfa\xf0\x97\x12\x33\x46\x4c\xf1\x1d\xe6\xf4\x3c\x77\xa7\x1f\xa7\x38\x38\xff\xe2\x68\x1c\x3e\xbc\x0a\xd1\x76\xfd\xf0\x6a\x51\xfd\x7a\x54\xdf\x3a\x7d\xfa\x70\x15\x1d\x7c\x7e\xfa\x88\xb9\xef\xc4\xf0\xf5\xd5\xa2\x0d\xe0\xe8\xfa\xd1\xe9\xd3\xce\xb3\xd3\x61\x38\xb7\xb9\xfd\xd8\x38\xa9\xcd\xd5\x9d\xb9\xb9\xb7\x8c\x23\x93\x33\x9c\xfb\x22\x14\x95\x1f\x15\x80\x22\x12\x63\x86\xf2\x87\x64\xfe\x64\x5b\x25\x32\x23\xc1\xfe\xbe\x41\xdb\x96\xab\x0a\x10\x6e\x71\x17\xea\x16\x4f\x05\x90\xd3\x53\xe2\x1d\xfa\x13\xcc\x2c\x5a\xc1\xaa\xc6\xfd\x86\xa8\xb0\x9c\xf1\x92\x9b\x1a\xb6\x5a\x35\x71\xfe\x19\x35\x29\xc2\x5a\x6e\x49\xb5\xe7\xce\x56\x07\x19\x04\x25\xd2\x06\xb5\xf9\x0a\x35\xd5\x26\xf1\x65\x97\xf0\xc7\x7d\x21\x5a\xc6\x8b\x69\x14\x14\x3c\x59\x34\xdf\xd0\x34\xbe\xcc\x6c\xed\xb1\x1e\x12\xab\xd7\xe2\x5a\xba\x4d\x19\x7b\xf0\xd0\x05\x29\xbb\x91\xa9\x3b\xc3\x42\x9e\x6d\xc7\x52\xc3\x07\x1e\xf2\x84\xcf\x71\xee\x83\x7e\x7e\x65\xdd\xa0\x85\x3f\x95\x8e\x3b\x07\xf6\xe8\x60\xa7\xcb\x07\x66\x5c\x2d\x10\x5a\xb5\xe4\x66\x3a\x04\x8f\x46\x29\x17\x35\xef\x59\x97\xf7\x5f\xe9\xf5\x98\x1d\xf7\x18\x08\x73\xb8\x2c\x6f\xbf\xcb\xa9\xc6\xa0\x53\xd0\xf6\x71\x2a\x50\x35\x7a\xe4\x3d\x22\xaa\x9a\x38\xf1\x1e\x33\xd1\x07\x9b\xe2\xc0\x49\xd2\x04\x6b\xcd\x79\xd2\xed\x86\x0c\xfd\x61\xce\x60\x3a\x95\x1c\x65\xba\xde\xef\x9e\xd5\x7a\xc5\x5c\xa5\xd2\x96\xd9\xaa\x14\xd8\x93\x60\x92\xe3\x8f\xa4\xf3\xed\xd8\xe7\x4e\x13\xdc\x57\x6b\x6b\xe6\xeb\xbf\xff\xdd\xa8\xbd\x4f\x2f\xdd\xe3\xfa\xfb\xfd\x2e\x7a\x22\x62\x43\xe6\xf1\xac\x6f\xc7\x58\x17\x84\x99\xf3\x4d\xe6\x44\xf2\x99\x0a\xcb\x43\x01\x69\x28\x43\x47\xa2\x9e\x67\x1f\x4b\xbe\x6f\x06\xcb\x7b\x19\x38\x64\xaa\xae\x31\xec\x94\x13\xf1\x6b\xd5\xd6\xa1\x53\xee\x9f\xeb\x7c\x82\xec\x3a\xe0\xfc\x15\x39\x1c\x8e\x33\xfa\x2e\x34\x11\x93\xf5\xc1\x48\xbc\xf3\x1f\xce\x55\xdf\x7d\xfe\x99\xc9\xfe\x97\x41\xdd\x6d\xa4\x5a\x0f\x39\xfa\x13\xb4\x3f\x1c\xb4\x47\x15\x7b\x5f\xb6\x02\xae\x2e\xc1\x99\x32\x78\xb5\x75\xda\xe0\x9a\xba\x77\xca\xd8\x0c\x91\xad\x1a\x19\xc0\x6f\xbf\x9f\xb4\xd3\x83\x30\x99\x0e\x4d\x57\xef\x0b\xed\x59\x68\xc2\xeb\x8f\xaf\xfd\xdf\xce\xc9\x37\x5c\x5d\x9f\x84\x8d\x49\xbc\xab\xbf\xa0\x86\xab\xeb\xff\x04\x00\x00\xff\xff\x67\x5d\x76\x7d\xa4\x2e\x00\x00")

func klusterletCrdsV10000_00_operatorOpenClusterManagementIo_klusterletsCrdYamlBytes() ([]byte, error) {
	return bindataRead(
		_klusterletCrdsV10000_00_operatorOpenClusterManagementIo_klusterletsCrdYaml,
		"klusterlet/crds/v1/0000_00_operator.open-cluster-management.io_klusterlets.crd.yaml",
	)
}

func klusterletCrdsV10000_00_operatorOpenClusterManagementIo_klusterletsCrdYaml() (*asset, error) {
	bytes, err := klusterletCrdsV10000_00_operatorOpenClusterManagementIo_klusterletsCrdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "klusterlet/crds/v1/0000_00_operator.open-cluster-management.io_klusterlets.crd.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _klusterletCrdsV1beta10000_00_operatorOpenClusterManagementIo_klusterletsCrdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x4d\x6f\xe4\xb8\xd1\xbe\xf7\xaf\x28\xf8\x3d\xf8\x0d\xe0\x96\x31\xc8\x25\xe8\x9b\xe3\xdd\x05\x8c\x9d\x9d\x0c\x6c\xef\xec\x61\xb1\x87\x92\x58\x6a\x31\xa6\x48\x85\x45\xf6\x6c\x27\xc8\x7f\x0f\x8a\x94\xd4\xfa\xe8\xf6\x78\x76\x12\x9d\xba\xc9\x62\xf1\xa9\x87\xf5\x45\x62\xa7\x3f\x91\x67\xed\xec\x0e\xb0\xd3\xf4\x7b\x20\x2b\xff\xb8\x78\xf9\x0b\x17\xda\xdd\x1e\xde\x95\x14\xf0\xdd\xe6\x45\x5b\xb5\x83\xfb\xc8\xc1\xb5\x8f\xc4\x2e\xfa\x8a\xbe\xa3\x5a\x5b\x1d\xb4\xb3\x9b\x96\x02\x2a\x0c\xb8\xdb\x00\x54\x9e\x50\x06\x9f\x75\x4b\x1c\xb0\xed\x76\x60\xa3\x31\x1b\x00\x8b\x2d\xed\xe0\xc5\x44\x0e\xe4\x0d\x05\x2e\x5c\x47\x1e\x83\xf3\xf2\xc3\x6e\xab\x3c\xb3\x6d\xd1\xe2\x9e\x5a\xb2\xa1\xd0\x6e\xc3\x1d\x55\xa2\x77\xef\x5d\xec\x76\xf0\x96\x25\x79\x2b\x96\x55\x00\x19\xfa\x8f\xe3\xae\x69\xd0\x68\x0e\x3f\x2e\x26\xde\x6b\xce\x93\x9d\x89\x1e\xcd\x0c\x69\x1a\x67\x6d\xf7\xd1\xa0\x9f\xce\x6c\x00\xb8\x72\x1d\xed\xe0\x3e\x8f\x6d\x00\x3a\x4f\x4c\xfe\x40\x3f\xdb\x17\xeb\x3e\xdb\x1f\x34\x19\xc5\x3b\xa8\xd1\x30\x89\x7c\x2c\x7d\x4f\x61\x0f\x91\x03\x86\xc8\x3b\xf8\xd7\xbf\x37\x00\x07\x34\x5a\x25\x06\xf3\xa4\xd8\x79\xf7\xf1\xe1\xd3\x9f\x9f\xaa\x86\x5a\xcc\x83\x00\x8a\xb8\xf2\xba\x4b\x72\x13\x23\xc0\x53\xda\xde\x06\x86\xca\xd9\xe0\x9d\x31\xe4\x19\x9c\x85\xd0\x10\x64\x9e\x14\xf4\xbc\x15\xf0\x4b\x43\xb6\xd7\x08\xb2\xa0\xd6\xfb\xe8\x49\xdd\x24\xe9\x99\xda\x7f\x44\xed\x89\x01\x81\xa9\xf2\x14\x12\xc5\x0a\x5c\x0d\xa5\x73\x81\x83\xc7\x6e\xdb\xc4\x72\xfb\x12\x4b\xca\x7a\x46\xb5\x3a\xef\xcd\xd8\x52\x3e\x98\x0e\x2b\x82\xe0\x00\x8d\x71\x9f\xe1\xee\xe3\x43\x52\x4f\x1c\x58\x46\x45\xb6\x89\x25\xd4\xce\xa7\xdf\x9e\xf6\x5a\xf4\x27\x4f\x1b\x74\x76\xde\x05\x57\x39\x53\xf4\x23\xe1\x28\x67\xe0\xca\xbf\x53\x15\x36\xa3\x48\x47\x3e\xe8\x81\x65\xf9\x26\x0e\x3f\x8e\x2d\xb8\xbc\x16\xb2\xb3\x0c\x28\x71\x71\xe2\x04\xe3\x90\xc7\x48\x01\xa7\x83\x10\xd3\x43\xa3\xf9\xc4\xf8\x1c\x61\x3a\xbb\x1a\xd0\xf6\xa8\x0a\x78\x12\xa7\xf0\x0c\xdc\xb8\x68\x94\xb0\x7d\x20\x2f\xd4\x56\x6e\x6f\xf5\x3f\x47\xcd\x23\x0b\x06\x03\x71\x98\x69\xd4\x36\x90\xb7\x68\xc4\x4d\x22\xdd\x00\x5a\x05\x2d\x1e\xc1\x93\xec\x01\xd1\x4e\xb4\x25\x11\x2e\xe0\x27\xe7\x09\xb4\xad\xdd\x0e\x9a\x10\x3a\xde\xdd\xde\xee\x75\x18\x42\xbc\x72\x6d\x1b\xad\x0e\xc7\xdb\xe4\x2f\xba\x8c\xc1\x79\xbe\x55\x74\x20\x73\xcb\x7a\xbf\x45\x5f\x35\x3a\x50\x15\xa2\xa7\x5b\xec\xf4\x36\x01\xb7\x21\xe5\x89\x56\xfd\xdf\xe8\xcc\xd7\x13\xa4\xf9\x3c\x38\x78\x6d\x4f\x8e\x90\x42\xf1\x22\xef\x12\x8f\xa0\x93\x87\xa5\x65\x19\xff\x89\x5e\x19\x12\x56\x1e\xbf\x7f\x7a\x86\x61\xd3\x74\x04\x73\xce\x13\xdb\x93\x38\x38\x11\x2f\x44\x69\x5b\x93\xcf\x07\x57\x7b\xd7\x26\x8d\x64\x55\xe7\xb4\x0d\xe9\x4f\x65\x34\xd9\x39\xe9\x1c\xcb\x56\x07\x9e\x7a\x69\x01\xf7\x68\xad\x0b\x50\x12\xc4\x4e\x61\x20\x55\xc0\x83\x85\x7b\x6c\xc9\xdc\x23\xd3\xff\x9c\x76\x61\x98\xb7\x42\xe9\x97\x89\x9f\xe6\xe7\xb9\xe0\x2c\x62\x00\x86\x64\x7b\xf6\x84\x9e\x3a\xaa\xa6\xf9\x45\xd8\x52\xc4\xda\x93\x02\x45\x9d\x71\x47\x49\xc0\x63\x16\x49\xe1\x20\x21\xb0\xc8\xbd\x63\x2c\xee\x25\x5d\x7f\x09\xd1\xf9\x38\x96\xaf\xcf\x61\x1f\xa4\xaa\xcc\x26\x16\xb0\xef\x4f\x72\xe2\x5e\x82\x5a\xb2\x50\x8e\xdf\x55\x4a\x94\xd8\x2b\x29\x57\x31\x52\x0b\xbd\x20\x79\xb4\x89\x65\x01\xcf\xf3\xf4\x98\x6c\x81\x3d\x59\x29\x4e\x29\x4b\x7a\xb4\xca\xb5\x79\x27\x5d\x83\x0e\xb2\xb7\x75\x61\xa5\x91\x29\xdc\x80\xf3\xa0\x34\x57\x2e\xb9\xa9\xa0\xc2\x4e\xcc\xf6\x1a\x03\x8d\xc8\x32\x6a\x9b\x2a\x02\x37\xba\x9e\x91\x77\xf1\xec\xe5\x93\xc2\x2e\x59\x23\x07\xc2\xcf\x8f\xef\xf9\x55\xc6\xbe\x5f\x89\x2f\x8f\x1d\x53\x05\x4d\xf9\xad\xd3\xa9\xd8\x79\x88\xde\xf0\xca\x3a\xc9\x4f\x15\x42\x19\xad\x32\x29\x91\x62\x22\x02\xab\x8a\x98\x75\x69\x68\xc4\x66\x8e\xf0\x30\xf0\xc4\x14\x80\xda\x2e\x1c\x6f\x86\xe3\x59\x29\x1e\x48\x69\x50\x68\x9d\x6a\x99\xe8\x8e\xde\xe4\x2d\xa5\x9e\x0c\x2b\x2a\xb4\x70\xd0\xac\x2f\xd0\x87\xde\xe3\x71\x31\xa3\x03\xb5\x2b\xca\x96\xd1\x31\x90\xb5\xe2\x6a\xca\xd0\x9c\x90\x95\x46\x78\x9d\xa1\x95\xfc\x85\x90\xc9\xdf\xa5\xc0\xe9\x09\xc4\xbf\x26\x0c\xe7\xe6\x96\x11\x74\x97\x45\x87\xf0\x19\xf1\x4b\xb0\x54\xce\x5a\x49\xb8\x52\xcf\x07\x4b\xcf\xaa\x84\x0b\x11\x57\xc0\xd3\x91\x03\xb5\x50\x91\x0f\x0c\xe8\x09\x22\x93\x9a\x45\x8d\x78\xc4\xf2\xb8\xa6\x0c\x9c\xf1\xf9\xe1\xab\x9d\x6f\x31\xec\xa0\x3c\x86\x73\x7c\x47\x6f\xde\xc0\x80\x1c\x6b\x6f\xbc\x1c\xe2\xcc\xef\xc7\xea\x31\x37\xef\x02\x07\x83\xd1\x5f\x67\xcc\xd8\x36\xbd\x1a\xb7\x1f\xc6\xe6\x6a\x92\xe7\xc6\x6e\x2b\xa7\xe8\xec\x92\x29\xf5\xa6\x24\x36\x8a\xac\x00\xb5\x91\x03\x34\x78\x90\x68\xef\x3c\xd5\xfa\x77\xb1\xf0\xea\x42\xdf\xbd\xbd\xca\xcd\xc8\x97\x73\xdd\x1c\xd8\x6b\x2a\x13\xcc\x2b\x51\x96\x1c\x62\xb4\x61\x9d\x65\x96\xa5\xe4\x55\x32\xa7\x0d\xe5\x43\x8b\x7b\xfa\x18\x8d\x79\x5a\x54\xbe\x15\xb9\x8f\x97\x56\x5d\x2a\x89\x5a\x84\xd6\x79\x6b\x59\x1d\xa7\x68\xbe\xd2\x90\xcf\xce\xbf\xbc\xdd\x80\x5f\x96\xd2\xaf\x02\x9f\x03\x5d\xd7\xc1\x3a\xed\xfe\x15\x80\xfb\x4b\xce\xc5\xe6\x22\x4d\x2f\x21\x55\xd1\x7b\xa9\xac\x79\xf1\xbc\x99\xf8\xf6\x06\xc2\x59\x95\xee\xaf\xaf\x57\xc3\xeb\xfb\x51\x2e\x5d\xa9\xb0\xbf\xcf\x28\x5d\xd7\xe4\xfb\x8e\x27\x0b\xf4\x38\x89\x25\xeb\xac\x93\xb5\x34\x9d\x27\xfc\x05\x7c\x92\xab\xde\x64\x75\x6a\xe9\x24\x01\xee\xe0\xae\xeb\x8c\x26\xb5\x83\xca\xb5\x9d\xb3\x89\x10\x89\xc5\x95\xd2\x92\xc8\x4a\xb7\x20\xd2\xc3\x4d\x6b\x95\x60\xef\x0e\xa8\x0d\x96\x86\x66\xfa\xb2\xf4\x3a\xee\x17\x0d\x91\x24\x64\x1c\x14\xa4\x18\xf7\x84\xea\x28\xe1\x98\x32\x60\x01\x1f\xbd\xdb\x7b\xa9\x56\x76\x3f\xdd\x60\xa5\xf9\x3c\xbc\xb4\x81\xb6\x80\x10\x3c\x5a\x4e\x54\x48\xaf\x2f\x5c\x52\x01\xdf\xd1\xde\xa3\x9a\x53\xf1\x56\xcd\xca\xa5\xe2\xd1\x62\xa8\x9a\x99\x8b\xcf\xa3\x10\xed\xb9\x46\xcf\x1c\xc5\x73\x0e\x5a\xc9\xb2\x8c\x21\x19\xac\x2b\x2a\xae\xff\xbb\xad\x43\xf2\x9a\xd1\xcd\x06\x2f\xe3\x89\x6b\xc8\x3d\x42\xea\x98\x76\x76\x5d\x3a\xbe\xa1\x0b\x30\xc8\xe1\x79\xa4\xfd\x59\xaf\x7b\xe9\x33\x78\xdf\xaf\x16\x0d\x05\x47\xd4\x41\x90\x81\x14\xbd\x03\xfc\x4b\xb5\xb0\x41\x2b\xc7\x95\x2e\x62\xce\xd2\x10\xe6\xd2\x4a\x58\x17\x9a\xaf\x2e\x93\xc3\x37\xd4\x7c\xb9\x97\x6d\x05\xce\x19\xa9\x96\x98\x71\xff\x16\x73\x7f\xca\x92\xf9\x6e\xda\xc4\x16\xed\x56\x22\x20\x85\x43\x3b\xcc\x59\xa5\x2b\x4c\x77\x54\x45\x01\xf5\x99\x56\x38\x7f\x58\xba\x18\x4e\x5c\xf5\x16\x67\x26\xfe\x90\xb5\x9e\x90\xe7\xcf\x19\x17\xcc\x78\x4c\x82\xd9\x8a\xff\x2f\xbd\xa6\xfa\x4f\xfd\xe2\xf1\xa9\x65\x3c\xb0\x6b\x4e\xf0\x2e\xd8\xf0\xed\xa0\xd7\xc5\xe0\x02\xe8\xbe\x2c\xf4\xee\x75\x2a\x03\x33\xb4\x05\xfc\xcd\xa6\x4e\xe2\xd9\x47\xba\xb9\x00\xfa\x07\x34\x4c\x37\xd0\x3f\xca\xfd\x21\xd4\x69\xfa\xcb\x98\x9f\x8f\xdd\x18\x10\xb2\x64\xc4\x3b\x5c\x40\x46\xdc\x6f\x01\x71\x18\x1e\x68\x0f\xef\x4e\xff\x12\x75\xdb\xfe\x45\x35\x4d\x40\x4e\xc6\x6a\x07\xc1\x47\xea\x9f\x15\x9d\x17\x0f\xcf\x23\x27\xca\xe5\x6a\xd1\x05\x52\x1f\x96\x8f\xa4\x57\x57\xb3\xf7\xcf\xf4\x77\x52\x24\xe1\xd7\xdf\x36\x59\x2b\xa9\x4f\x03\x0e\xf8\xf5\xb7\xff\x04\x00\x00\xff\xff\xf7\x33\xca\x5c\x46\x16\x00\x00")

func klusterletCrdsV1beta10000_00_operatorOpenClusterManagementIo_klusterletsCrdYamlBytes() ([]byte, error) {
	return bindataRead(
		_klusterletCrdsV1beta10000_00_operatorOpenClusterManagementIo_klusterletsCrdYaml,
		"klusterlet/crds/v1beta1/0000_00_operator.open-cluster-management.io_klusterlets.crd.yaml",
	)
}

func klusterletCrdsV1beta10000_00_operatorOpenClusterManagementIo_klusterletsCrdYaml() (*asset, error) {
	bytes, err := klusterletCrdsV1beta10000_00_operatorOpenClusterManagementIo_klusterletsCrdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "klusterlet/crds/v1beta1/0000_00_operator.open-cluster-management.io_klusterlets.crd.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _klusterletImage_pull_secretYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\xbd\x6e\xc3\x30\x0c\x04\xe0\x5d\x4f\x71\x48\xf7\x00\x5d\xb5\xba\x4b\x51\xf4\x07\x68\xd1\x9d\x95\x59\x47\x89\x45\x0a\x14\x5d\xc0\x08\xf2\xee\x85\xe3\x64\xf3\xcc\xef\x78\xf7\x80\x4e\xeb\x6c\x79\x38\x38\x3a\x15\xb7\xfc\x33\xb9\x5a\x83\x2b\xfc\xc0\x78\xaf\x2c\xe8\xc6\xa9\x39\x1b\x5e\x49\x68\xe0\xc2\xe2\xa8\xa6\x47\x4e\x1e\x02\xd5\xfc\xcd\xd6\xb2\x4a\xc4\xdf\x63\x38\x65\xe9\x23\x3e\x39\x19\x7b\x28\xec\xd4\x93\x53\x0c\x80\x50\xe1\x88\xdd\xf9\x8c\xfd\x73\xa1\x81\x3f\xa6\x71\x5c\xd9\x1b\x15\xc6\xe5\xb2\xbb\xa1\x56\x29\xdd\xe5\xcb\x5a\x3c\xae\xe8\x7a\xb9\x4a\x9f\x2b\x47\x6c\xfc\xfa\x9a\xeb\x22\xc2\xbd\x15\xd8\xf7\x9a\x4e\x6c\x49\xe5\x37\x0f\xc7\xb6\xcc\xdc\xc8\x3d\x91\xd3\x92\xfb\x0f\x00\x00\xff\xff\xc7\xa9\xa6\x5a\x0f\x01\x00\x00")

func klusterletImage_pull_secretYamlBytes() ([]byte, error) {
	return bindataRead(
		_klusterletImage_pull_secretYaml,
		"klusterlet/image_pull_secret.yaml",
	)
}

func klusterletImage_pull_secretYaml() (*asset, error) {
	bytes, err := klusterletImage_pull_secretYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "klusterlet/image_pull_secret.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _klusterletKlusterletYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xc1\x4a\xf4\x40\x10\x84\xef\xf3\x14\xc5\xfe\xe7\xcd\x8f\xd7\x5c\x73\x12\x71\x15\x05\x3d\xb7\x49\x93\x1d\x93\xe9\x1e\x7a\x3a\x8a\x2c\xfb\xee\x92\x4d\x34\x28\x1e\xbb\xbf\xaf\xa0\xea\x1f\x1a\xcd\x1f\x16\xfb\xa3\xa3\x51\x71\x8b\x2f\x93\xab\x15\xb8\xc2\x8f\x8c\xbb\xcc\x82\x66\x9c\x8a\xb3\xe1\x96\x84\x7a\x4e\x2c\x8e\x6c\xfa\xca\xad\x87\x40\x39\x3e\xb1\x95\xa8\x52\x43\x33\x1b\xb9\x5a\xa5\x99\x65\xdf\x2e\xa9\x7d\xfa\x4e\x55\x51\xff\xbf\x5d\x85\x21\x4a\x57\xe3\x66\xc1\x23\x7b\x48\xec\xd4\x91\x53\x1d\x00\xa1\xc4\x35\x86\x0d\x96\xcc\xed\x0c\x8c\xfb\x58\xdc\xc8\xa3\xca\x75\xa2\x9e\xef\xa7\x71\x7c\x9c\x21\x4e\x27\x54\x0f\xbf\xf1\x81\x12\xe3\x7c\x0e\xc0\xbb\xda\xf0\x47\xe2\xf9\xeb\xbd\x99\x6b\xe5\xc3\xa5\xc3\x6e\x96\x96\xc9\x5d\xb3\x81\x92\xa9\x9d\xf5\xdd\x5a\xf6\x72\xaf\xf6\xb6\xe9\xa7\xf9\x19\x00\x00\xff\xff\xbb\xf0\x6e\x35\x66\x01\x00\x00")

func klusterletKlusterletYamlBytes() ([]byte, error) {
	return bindataRead(
		_klusterletKlusterletYaml,
		"klusterlet/klusterlet.yaml",
	)
}

func klusterletKlusterletYaml() (*asset, error) {
	bytes, err := klusterletKlusterletYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "klusterlet/klusterlet.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _klusterletKlusterlet_admin_aggregate_clusterroleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\x31\x4f\xec\x30\x10\x84\x7b\xff\x8a\x95\x5f\xfb\x92\xa7\xd7\x21\xb7\x57\x50\x21\x24\x0a\x1a\x74\xc5\x26\x19\x25\xe6\x1c\xaf\xb5\x5e\x1f\x82\x5f\x8f\x92\xe3\xb8\x0a\x2a\x8f\x3c\x33\xdf\xce\x1f\x3a\x48\x79\xd7\x38\x2f\x46\x07\xc9\xa6\x71\x68\x26\x5a\xc9\x84\x6c\x01\x3d\x16\x64\x3a\xa4\x56\x0d\x4a\x0f\x9c\x79\xc6\x8a\x6c\x54\x54\x5e\x31\x9a\x73\x5c\xe2\x33\xb4\x46\xc9\x81\x74\xe0\xb1\xe7\x66\x8b\x68\xfc\x60\x8b\x92\xfb\xd3\x5d\xed\xa3\xfc\x3b\xff\x77\xa7\x98\xa7\x70\x45\x3d\x49\x82\x5b\x61\x3c\xb1\x71\x70\x44\x99\x57\x04\x92\x82\xdc\x8d\x97\x48\xb7\x7e\x5f\x0b\xa7\xcb\x57\x82\x75\x3c\xad\x31\x77\x3c\xcf\x8a\x99\x0d\xd7\xb4\x6e\x40\xa2\xc4\x03\x52\xdd\x80\xf4\xcb\x9a\x5b\xdb\xe4\x02\x0c\xe4\x4d\x1b\xbc\xd3\x96\x50\x83\xeb\x88\x4b\xbc\x57\x69\xa5\x06\x7a\xf1\x52\xa0\x6c\xa2\xfd\x0f\x03\xfb\x28\xfe\xe8\x88\x14\x55\x9a\x8e\xd8\x4b\xb7\xd1\x75\x37\xcf\xd0\x61\x37\x66\x98\xff\x4b\x3e\xc5\xba\xbf\x6f\x6c\xe3\xb2\x89\x51\xc1\x86\x4d\xb5\x32\x7d\xa9\x72\x35\x27\x24\x18\xfc\xf1\x33\x00\x00\xff\xff\xc6\xe5\x63\xd1\xb1\x01\x00\x00")

func klusterletKlusterlet_admin_aggregate_clusterroleYamlBytes() ([]byte, error) {
	return bindataRead(
		_klusterletKlusterlet_admin_aggregate_clusterroleYaml,
		"klusterlet/klusterlet_admin_aggregate_clusterrole.yaml",
	)
}

func klusterletKlusterlet_admin_aggregate_clusterroleYaml() (*asset, error) {
	bytes, err := klusterletKlusterlet_admin_aggregate_clusterroleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "klusterlet/klusterlet_admin_aggregate_clusterrole.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _klusterletNamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xce\xb1\x4e\xc5\x30\x0c\x46\xe1\x3d\x4f\xf1\x2b\xec\x45\xac\x59\x3b\x22\x60\x63\x37\x37\xe6\xd6\x34\xb1\xa3\xc4\xa5\x42\x55\xdf\x1d\x21\xa4\x8e\x67\xfa\xce\x03\x66\x6b\x3f\x5d\xee\x8b\x63\x36\xf5\x2e\x1f\x9b\x5b\x1f\x70\x83\x2f\x8c\xb7\xc6\x8a\xb9\x6c\xc3\xb9\xe3\x85\x94\xee\x5c\x59\x1d\xad\xdb\x17\xdf\x3c\x04\x6a\xf2\xce\x7d\x88\x69\xc2\xf7\x53\x58\x45\x73\xc2\x2b\x55\x1e\x8d\x6e\x1c\x2a\x3b\x65\x72\x4a\x01\x20\x55\x73\x72\x31\x1d\x7f\x09\xec\xd6\xd7\x62\x94\x27\x6b\xac\x63\x91\x4f\x9f\xc4\x1e\xa9\x14\xdb\x39\x27\xc4\x7a\x79\x31\x00\x4a\x95\x13\xe2\x71\x60\x7a\xfe\x1f\x2a\xec\x97\x84\xf3\x8c\xe1\x37\x00\x00\xff\xff\x88\xe3\x41\xd4\xce\x00\x00\x00")

func klusterletNamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_klusterletNamespaceYaml,
		"klusterlet/namespace.yaml",
	)
}

func klusterletNamespaceYaml() (*asset, error) {
	bytes, err := klusterletNamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "klusterlet/namespace.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _klusterletOperatorYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x92\xb1\x6e\xdb\x40\x0c\x86\x77\x3d\x05\xa1\x0e\x99\x62\x37\x6d\x86\xe2\xb6\x22\x01\xda\xa0\x6d\x22\x34\x41\x77\xfa\x44\x4b\xac\x4f\xc7\x03\x8f\x72\xe1\x1a\x7e\xf7\x42\xb6\xa3\x48\x48\x1e\xa0\x9a\x04\xfe\x3f\x3f\xfc\x24\xef\x1d\xdc\x48\xda\x29\x37\xad\xc1\x8d\x44\x53\x5e\xf5\x26\x9a\xc1\x04\xac\x25\x78\x48\x14\xe1\x26\xf4\xd9\x48\xe1\x07\x46\x6c\xa8\xa3\x68\x90\x54\x7e\x93\xb7\xa2\xd8\x70\xac\x1d\xdc\x52\x0a\xb2\x1b\x94\x02\x13\xff\x22\xcd\x2c\xd1\x01\xa6\x94\x97\xdb\xab\xa2\x23\xc3\x1a\x0d\x5d\x01\x10\xb1\x23\x07\x9b\x13\x32\x90\x9d\x4b\x39\xa1\x27\x07\xe5\x7e\x0f\x8b\x6f\xa3\x78\xff\xac\xc0\xe1\x50\x16\x00\x01\x57\x14\xf2\x80\x81\x01\x3e\xe3\xe4\x44\x7e\x50\x94\x52\x60\x8f\xd9\xc1\x55\x01\x90\x29\x90\x37\xd1\x53\x4f\x87\xe6\xdb\xef\x13\xc8\x6b\x0c\x80\x51\x97\x02\x1a\x9d\x5b\x26\xd9\x8f\xfe\x18\xc5\xd0\x58\xe2\x88\x00\x30\xd4\x86\x6c\xf1\x47\x74\x13\x04\xeb\x85\x24\x8a\xb9\xe5\xb5\x2d\x58\x96\xdd\xb8\x36\x07\x17\xfb\x92\xd6\x6b\xf2\x56\x3a\x28\x2b\xa5\x35\xa9\x52\x7d\xdb\x2b\xc7\xe6\xd1\xb7\x54\xf7\x81\x63\x53\x1e\x2e\xce\xe8\x30\xcb\xfa\x56\x5a\x80\xe7\xc1\x8f\xff\xa4\x5b\xf6\xf4\xd9\x7b\xe9\xe3\x71\x7d\xaf\xec\x00\x5e\xa2\x21\x47\xd2\x11\x7c\xf9\xd6\x59\x4e\x1f\x77\xd8\x90\x83\xe1\x2e\x3f\xa9\xe1\x6c\x7a\x1c\xfe\x21\x91\xa2\x89\xde\x0d\x32\x1c\x0e\x73\x7f\xd5\x87\x50\x49\x60\xbf\x73\x70\xb7\xbe\x17\xab\x94\xf2\xf0\x3a\xc6\x39\xb4\x99\x4c\x35\x04\x28\x97\x3a\xc1\x5f\xca\x99\x5f\xce\x4d\x2f\x01\x5f\x84\xc0\x5b\x8a\x94\x73\xa5\xb2\xa2\x29\xb4\x35\x4b\x5f\xc8\xa6\x25\x80\x84\xd6\x3a\x58\xb6\x84\xc1\xda\xbf\x33\x29\xfb\x96\x86\x2d\x7c\x7d\x7a\xaa\x1e\xe7\x4d\xa2\xe6\xe0\xd3\xf5\xf5\xc7\x49\x99\x23\x1b\x63\xb8\xa5\x80\xbb\x47\xf2\x12\xeb\xec\xe0\xc3\xc4\x90\x48\x59\xea\x51\xba\x7a\x3f\x6a\x4a\x58\xf3\x7f\x94\xf9\x5f\x00\x00\x00\xff\xff\x03\x2e\x8f\x6e\x07\x04\x00\x00")

func klusterletOperatorYamlBytes() ([]byte, error) {
	return bindataRead(
		_klusterletOperatorYaml,
		"klusterlet/operator.yaml",
	)
}

func klusterletOperatorYaml() (*asset, error) {
	bytes, err := klusterletOperatorYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "klusterlet/operator.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _klusterletService_accountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcd\xcf\x4b\xc3\x40\x10\xc5\xf1\xfb\xfc\x15\x8f\x7a\x6e\xc1\xeb\xde\x24\x27\x11\x7f\x40\xd1\xfb\xb8\x79\xa6\x6b\x93\xd9\xb0\x3b\x29\x48\xd8\xff\x5d\xd4\x5a\xd0\xeb\xfb\x32\x9f\xb9\x42\x97\xe7\x8f\x92\x86\x83\xa3\xcb\xe6\x25\xbd\x2e\x9e\x4b\x85\x67\xf8\x81\x78\x9c\x69\xe8\xc6\xa5\x3a\x0b\xee\xd5\x74\xe0\x44\x73\xcc\x25\xbf\x33\xba\x88\xce\xe9\x85\xa5\xa6\x6c\x01\xa7\x6b\x39\x26\xeb\x03\xf6\x2c\xa7\x14\x79\x13\x63\x5e\xcc\x65\xa2\x6b\xaf\xae\x41\x00\xd3\x89\x01\xc7\x1f\x71\xa4\x9f\xa7\x3a\x6b\x64\xc0\x66\x5d\xb1\xbb\xbb\xc4\x87\xdf\x82\xd6\x36\xb2\xae\x5b\xa4\x37\xec\x9e\x2b\x6f\x27\x1d\xf8\xb4\x8c\xe3\x9e\xb1\xd0\xd1\x9a\xa4\xbf\x53\x0d\xb2\x3d\x3f\xfb\x46\xff\x5d\x7c\xc9\x17\x94\xd6\xb7\x26\x9f\x01\x00\x00\xff\xff\x41\xa1\xbe\x98\x0b\x01\x00\x00")

func klusterletService_accountYamlBytes() ([]byte, error) {
	return bindataRead(
		_klusterletService_accountYaml,
		"klusterlet/service_account.yaml",
	)
}

func klusterletService_accountYaml() (*asset, error) {
	bytes, err := klusterletService_accountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "klusterlet/service_account.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"hub/managedcluster/manifests/managedcluster-clusterrole.yaml":                             hubManagedclusterManifestsManagedclusterClusterroleYaml,
	"hub/managedcluster/manifests/managedcluster-clusterrolebinding.yaml":                      hubManagedclusterManifestsManagedclusterClusterrolebindingYaml,
	"hub/managedcluster/manifests/managedcluster-service-account.yaml":                         hubManagedclusterManifestsManagedclusterServiceAccountYaml,
	"klusterlet/bootstrap_secret.yaml":                                                         klusterletBootstrap_secretYaml,
	"klusterlet/cluster_role.yaml":                                                             klusterletCluster_roleYaml,
	"klusterlet/cluster_role_binding.yaml":                                                     klusterletCluster_role_bindingYaml,
	"klusterlet/crds/v1/0000_00_operator.open-cluster-management.io_klusterlets.crd.yaml":      klusterletCrdsV10000_00_operatorOpenClusterManagementIo_klusterletsCrdYaml,
	"klusterlet/crds/v1beta1/0000_00_operator.open-cluster-management.io_klusterlets.crd.yaml": klusterletCrdsV1beta10000_00_operatorOpenClusterManagementIo_klusterletsCrdYaml,
	"klusterlet/image_pull_secret.yaml":                                                        klusterletImage_pull_secretYaml,
	"klusterlet/klusterlet.yaml":                                                               klusterletKlusterletYaml,
	"klusterlet/klusterlet_admin_aggregate_clusterrole.yaml":                                   klusterletKlusterlet_admin_aggregate_clusterroleYaml,
	"klusterlet/namespace.yaml":                                                                klusterletNamespaceYaml,
	"klusterlet/operator.yaml":                                                                 klusterletOperatorYaml,
	"klusterlet/service_account.yaml":                                                          klusterletService_accountYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"hub": &bintree{nil, map[string]*bintree{
		"managedcluster": &bintree{nil, map[string]*bintree{
			"manifests": &bintree{nil, map[string]*bintree{
				"managedcluster-clusterrole.yaml":        &bintree{hubManagedclusterManifestsManagedclusterClusterroleYaml, map[string]*bintree{}},
				"managedcluster-clusterrolebinding.yaml": &bintree{hubManagedclusterManifestsManagedclusterClusterrolebindingYaml, map[string]*bintree{}},
				"managedcluster-service-account.yaml":    &bintree{hubManagedclusterManifestsManagedclusterServiceAccountYaml, map[string]*bintree{}},
			}},
		}},
	}},
	"klusterlet": &bintree{nil, map[string]*bintree{
		"bootstrap_secret.yaml":     &bintree{klusterletBootstrap_secretYaml, map[string]*bintree{}},
		"cluster_role.yaml":         &bintree{klusterletCluster_roleYaml, map[string]*bintree{}},
		"cluster_role_binding.yaml": &bintree{klusterletCluster_role_bindingYaml, map[string]*bintree{}},
		"crds": &bintree{nil, map[string]*bintree{
			"v1": &bintree{nil, map[string]*bintree{
				"0000_00_operator.open-cluster-management.io_klusterlets.crd.yaml": &bintree{klusterletCrdsV10000_00_operatorOpenClusterManagementIo_klusterletsCrdYaml, map[string]*bintree{}},
			}},
			"v1beta1": &bintree{nil, map[string]*bintree{
				"0000_00_operator.open-cluster-management.io_klusterlets.crd.yaml": &bintree{klusterletCrdsV1beta10000_00_operatorOpenClusterManagementIo_klusterletsCrdYaml, map[string]*bintree{}},
			}},
		}},
		"image_pull_secret.yaml":                      &bintree{klusterletImage_pull_secretYaml, map[string]*bintree{}},
		"klusterlet.yaml":                             &bintree{klusterletKlusterletYaml, map[string]*bintree{}},
		"klusterlet_admin_aggregate_clusterrole.yaml": &bintree{klusterletKlusterlet_admin_aggregate_clusterroleYaml, map[string]*bintree{}},
		"namespace.yaml":                              &bintree{klusterletNamespaceYaml, map[string]*bintree{}},
		"operator.yaml":                               &bintree{klusterletOperatorYaml, map[string]*bintree{}},
		"service_account.yaml":                        &bintree{klusterletService_accountYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
